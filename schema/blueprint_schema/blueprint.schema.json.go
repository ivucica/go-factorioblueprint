// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package blueprint_schema

import "encoding/json"
import "fmt"
import yaml "gopkg.in/yaml.v3"
import "reflect"

// Parameters for arithmetic combinators.
type ArithmeticConditions struct {
	// First input signal.
	FirstSignal *SignalID `json:"first_signal,omitempty" yaml:"first_signal,omitempty" mapstructure:"first_signal,omitempty"`

	// Arithmetic operation (e.g., '+', '-', '*', '/').
	Operation *string `json:"operation,omitempty" yaml:"operation,omitempty" mapstructure:"operation,omitempty"`

	// Signal where the result is stored.
	OutputSignal *SignalID `json:"output_signal,omitempty" yaml:"output_signal,omitempty" mapstructure:"output_signal,omitempty"`

	// Second input signal.
	SecondSignal *SignalID `json:"second_signal,omitempty" yaml:"second_signal,omitempty" mapstructure:"second_signal,omitempty"`
}

// An object representing a Factorio blueprint.
type Blueprint struct {
	// Indicates if absolute snapping is enabled.
	AbsoluteSnapping *bool `json:"absolute-snapping,omitempty" yaml:"absolute-snapping,omitempty" mapstructure:"absolute-snapping,omitempty"`

	// An optional description of the blueprint.
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// An array of entities included in the blueprint.
	Entities []Entity `json:"entities" yaml:"entities" mapstructure:"entities"`

	// Icons set by the user for the blueprint.
	Icons []Icon `json:"icons" yaml:"icons" mapstructure:"icons"`

	// The name of the item; usually 'blueprint' in vanilla Factorio.
	Item string `json:"item" yaml:"item" mapstructure:"item"`

	// The user-defined name of the blueprint.
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// The color assigned to the blueprint's label.
	LabelColor *Color `json:"label_color,omitempty" yaml:"label_color,omitempty" mapstructure:"label_color,omitempty"`

	// Offset relative to the global snapping grid.
	PositionRelativeToGrid *Position `json:"position-relative-to-grid,omitempty" yaml:"position-relative-to-grid,omitempty" mapstructure:"position-relative-to-grid,omitempty"`

	// Train schedules included in the blueprint.
	Schedules []Schedule `json:"schedules,omitempty" yaml:"schedules,omitempty" mapstructure:"schedules,omitempty"`

	// Dimensions of the grid used for snapping.
	SnapToGrid *Position `json:"snap-to-grid,omitempty" yaml:"snap-to-grid,omitempty" mapstructure:"snap-to-grid,omitempty"`

	// An array of tiles included in the blueprint.
	Tiles []Tile `json:"tiles,omitempty" yaml:"tiles,omitempty" mapstructure:"tiles,omitempty"`

	// The game version when the blueprint was created.
	Version int `json:"version" yaml:"version" mapstructure:"version"`
}

type BlueprintSchemaJSON struct {
	// Blueprint corresponds to the JSON schema field "blueprint".
	Blueprint *Blueprint `json:"blueprint,omitempty" yaml:"blueprint,omitempty" mapstructure:"blueprint,omitempty"`

	// BlueprintBook corresponds to the JSON schema field "blueprint-book".
	BlueprintBook *BlueprintSchemaJSONBlueprintBook `json:"blueprint-book,omitempty" yaml:"blueprint-book,omitempty" mapstructure:"blueprint-book,omitempty"`
}

type BlueprintSchemaJSONBlueprintBook struct {
	// ActiveIndex corresponds to the JSON schema field "active_index".
	ActiveIndex *int `json:"active_index,omitempty" yaml:"active_index,omitempty" mapstructure:"active_index,omitempty"`

	// Blueprints corresponds to the JSON schema field "blueprints".
	Blueprints []BlueprintSchemaJSONBlueprintBookBlueprintsElem `json:"blueprints" yaml:"blueprints" mapstructure:"blueprints"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// Icons corresponds to the JSON schema field "icons".
	Icons []Icon `json:"icons,omitempty" yaml:"icons,omitempty" mapstructure:"icons,omitempty"`

	// Item corresponds to the JSON schema field "item".
	Item BlueprintSchemaJSONBlueprintBookItem `json:"item" yaml:"item" mapstructure:"item"`

	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// LabelColor corresponds to the JSON schema field "label_color".
	LabelColor *Color `json:"label_color,omitempty" yaml:"label_color,omitempty" mapstructure:"label_color,omitempty"`

	// Version corresponds to the JSON schema field "version".
	Version int `json:"version" yaml:"version" mapstructure:"version"`
}

type BlueprintSchemaJSONBlueprintBookBlueprintsElem struct {
	// Blueprint corresponds to the JSON schema field "blueprint".
	Blueprint Blueprint `json:"blueprint" yaml:"blueprint" mapstructure:"blueprint"`

	// Index corresponds to the JSON schema field "index".
	Index int `json:"index" yaml:"index" mapstructure:"index"`
}

type BlueprintSchemaJSONBlueprintBookItem string

const BlueprintSchemaJSONBlueprintBookItemBlueprintBook BlueprintSchemaJSONBlueprintBookItem = "blueprint-book"

// A color with RGBA components.
type Color struct {
	// Alpha (transparency) component (0 to 1).
	A *float64 `json:"a,omitempty" yaml:"a,omitempty" mapstructure:"a,omitempty"`

	// Blue component (0 to 1).
	B float64 `json:"b" yaml:"b" mapstructure:"b"`

	// Green component (0 to 1).
	G float64 `json:"g" yaml:"g" mapstructure:"g"`

	// Red component (0 to 1).
	R float64 `json:"r" yaml:"r" mapstructure:"r"`
}

// A circuit or logistic condition.
type Condition struct {
	// Comparator operator (e.g., '>', '=', '<').
	Comparator *string `json:"comparator,omitempty" yaml:"comparator,omitempty" mapstructure:"comparator,omitempty"`

	// A constant value used in the condition.
	Constant *int `json:"constant,omitempty" yaml:"constant,omitempty" mapstructure:"constant,omitempty"`

	// The first signal in the condition.
	FirstSignal *SignalID `json:"first_signal,omitempty" yaml:"first_signal,omitempty" mapstructure:"first_signal,omitempty"`

	// The second signal in the condition.
	SecondSignal *SignalID `json:"second_signal,omitempty" yaml:"second_signal,omitempty" mapstructure:"second_signal,omitempty"`
}

// Circuit network connections for an entity.
type Connection struct {
	// First connection point.
	A1 *ConnectionPoint `json:"1,omitempty" yaml:"1,omitempty" mapstructure:"1,omitempty"`

	// Second connection point (if applicable).
	A2 *ConnectionPoint `json:"2,omitempty" yaml:"2,omitempty" mapstructure:"2,omitempty"`
}

// Information about a single circuit network connection.
type ConnectionData struct {
	// Circuit connector ID of the connected entity.
	CircuitID *int `json:"circuit_id,omitempty" yaml:"circuit_id,omitempty" mapstructure:"circuit_id,omitempty"`

	// Entity number of the connected entity.
	EntityID int `json:"entity_id" yaml:"entity_id" mapstructure:"entity_id"`
}

// A connection point for circuit network wires.
type ConnectionPoint struct {
	// Connections made with green wires.
	Green []ConnectionData `json:"green,omitempty" yaml:"green,omitempty" mapstructure:"green,omitempty"`

	// Connections made with red wires.
	Red []ConnectionData `json:"red,omitempty" yaml:"red,omitempty" mapstructure:"red,omitempty"`
}

// Control behavior settings for entities.
type ControlBehavior struct {
	// Settings for arithmetic combinators.
	ArithmeticConditions *ArithmeticConditions `json:"arithmetic_conditions,omitempty" yaml:"arithmetic_conditions,omitempty" mapstructure:"arithmetic_conditions,omitempty"`

	// Condition for circuit network signals.
	CircuitCondition *Condition `json:"circuit_condition,omitempty" yaml:"circuit_condition,omitempty" mapstructure:"circuit_condition,omitempty"`

	// Settings for decider combinators.
	DeciderConditions *DeciderConditions `json:"decider_conditions,omitempty" yaml:"decider_conditions,omitempty" mapstructure:"decider_conditions,omitempty"`

	// Filters used by constant combinators and other entities.
	Filters []ItemFilter `json:"filters,omitempty" yaml:"filters,omitempty" mapstructure:"filters,omitempty"`

	// Indicates if the entity is active.
	IsOn *bool `json:"is_on,omitempty" yaml:"is_on,omitempty" mapstructure:"is_on,omitempty"`

	// Condition for logistic network signals.
	LogisticCondition *Condition `json:"logistic_condition,omitempty" yaml:"logistic_condition,omitempty" mapstructure:"logistic_condition,omitempty"`
}

// Parameters for decider combinators.
type DeciderConditions struct {
	// Comparator operator.
	Comparator *string `json:"comparator,omitempty" yaml:"comparator,omitempty" mapstructure:"comparator,omitempty"`

	// Constant value for comparison.
	Constant *int `json:"constant,omitempty" yaml:"constant,omitempty" mapstructure:"constant,omitempty"`

	// Whether to copy the input count to the output.
	CopyCountFromInput *bool `json:"copy_count_from_input,omitempty" yaml:"copy_count_from_input,omitempty" mapstructure:"copy_count_from_input,omitempty"`

	// First input signal.
	FirstSignal *SignalID `json:"first_signal,omitempty" yaml:"first_signal,omitempty" mapstructure:"first_signal,omitempty"`

	// Signal to output when condition is true.
	OutputSignal *SignalID `json:"output_signal,omitempty" yaml:"output_signal,omitempty" mapstructure:"output_signal,omitempty"`

	// Second input signal.
	SecondSignal *SignalID `json:"second_signal,omitempty" yaml:"second_signal,omitempty" mapstructure:"second_signal,omitempty"`
}

// An entity placed within the blueprint.
type Entity struct {
	// AlertParameters corresponds to the JSON schema field "alert_parameters".
	AlertParameters *SpeakerAlertParameters `json:"alert_parameters,omitempty" yaml:"alert_parameters,omitempty" mapstructure:"alert_parameters,omitempty"`

	// AmmoInventory corresponds to the JSON schema field "ammo_inventory".
	AmmoInventory *Inventory `json:"ammo_inventory,omitempty" yaml:"ammo_inventory,omitempty" mapstructure:"ammo_inventory,omitempty"`

	// AutoLaunch corresponds to the JSON schema field "auto_launch".
	AutoLaunch *bool `json:"auto_launch,omitempty" yaml:"auto_launch,omitempty" mapstructure:"auto_launch,omitempty"`

	// Bar corresponds to the JSON schema field "bar".
	Bar *int `json:"bar,omitempty" yaml:"bar,omitempty" mapstructure:"bar,omitempty"`

	// Color corresponds to the JSON schema field "color".
	Color *Color `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// Circuit connections made by the entity.
	Connections *Connection `json:"connections,omitempty" yaml:"connections,omitempty" mapstructure:"connections,omitempty"`

	// ControlBehavior corresponds to the JSON schema field "control_behavior".
	ControlBehavior *ControlBehavior `json:"control_behavior,omitempty" yaml:"control_behavior,omitempty" mapstructure:"control_behavior,omitempty"`

	// The direction the entity is facing.
	Direction *int `json:"direction,omitempty" yaml:"direction,omitempty" mapstructure:"direction,omitempty"`

	// DropPosition corresponds to the JSON schema field "drop_position".
	DropPosition *Position `json:"drop_position,omitempty" yaml:"drop_position,omitempty" mapstructure:"drop_position,omitempty"`

	// A unique identifier for the entity within the blueprint.
	EntityNumber int `json:"entity_number" yaml:"entity_number" mapstructure:"entity_number"`

	// Filter corresponds to the JSON schema field "filter".
	Filter *string `json:"filter,omitempty" yaml:"filter,omitempty" mapstructure:"filter,omitempty"`

	// FilterMode corresponds to the JSON schema field "filter_mode".
	FilterMode *EntityFilterMode `json:"filter_mode,omitempty" yaml:"filter_mode,omitempty" mapstructure:"filter_mode,omitempty"`

	// Filters corresponds to the JSON schema field "filters".
	Filters []ItemFilter `json:"filters,omitempty" yaml:"filters,omitempty" mapstructure:"filters,omitempty"`

	// InfinitySettings corresponds to the JSON schema field "infinity_settings".
	InfinitySettings *InfinitySettings `json:"infinity_settings,omitempty" yaml:"infinity_settings,omitempty" mapstructure:"infinity_settings,omitempty"`

	// InputPriority corresponds to the JSON schema field "input_priority".
	InputPriority *EntityInputPriority `json:"input_priority,omitempty" yaml:"input_priority,omitempty" mapstructure:"input_priority,omitempty"`

	// Inventory corresponds to the JSON schema field "inventory".
	Inventory *Inventory `json:"inventory,omitempty" yaml:"inventory,omitempty" mapstructure:"inventory,omitempty"`

	// Items corresponds to the JSON schema field "items".
	Items ItemRequest `json:"items,omitempty" yaml:"items,omitempty" mapstructure:"items,omitempty"`

	// ManualTrainsLimit corresponds to the JSON schema field "manual_trains_limit".
	ManualTrainsLimit *int `json:"manual_trains_limit,omitempty" yaml:"manual_trains_limit,omitempty" mapstructure:"manual_trains_limit,omitempty"`

	// The prototype name of the entity.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Copper wire connections to other entities.
	Neighbours []int `json:"neighbours,omitempty" yaml:"neighbours,omitempty" mapstructure:"neighbours,omitempty"`

	// The orientation of the entity, ranging from 0 to 1.
	Orientation *float64 `json:"orientation,omitempty" yaml:"orientation,omitempty" mapstructure:"orientation,omitempty"`

	// OutputPriority corresponds to the JSON schema field "output_priority".
	OutputPriority *EntityOutputPriority `json:"output_priority,omitempty" yaml:"output_priority,omitempty" mapstructure:"output_priority,omitempty"`

	// OverrideStackSize corresponds to the JSON schema field "override_stack_size".
	OverrideStackSize *int `json:"override_stack_size,omitempty" yaml:"override_stack_size,omitempty" mapstructure:"override_stack_size,omitempty"`

	// Parameters corresponds to the JSON schema field "parameters".
	Parameters *SpeakerParameters `json:"parameters,omitempty" yaml:"parameters,omitempty" mapstructure:"parameters,omitempty"`

	// PickupPosition corresponds to the JSON schema field "pickup_position".
	PickupPosition *Position `json:"pickup_position,omitempty" yaml:"pickup_position,omitempty" mapstructure:"pickup_position,omitempty"`

	// The position of the entity on the blueprint grid.
	Position Position `json:"position" yaml:"position" mapstructure:"position"`

	// Recipe corresponds to the JSON schema field "recipe".
	Recipe *string `json:"recipe,omitempty" yaml:"recipe,omitempty" mapstructure:"recipe,omitempty"`

	// RequestFilters corresponds to the JSON schema field "request_filters".
	RequestFilters []LogisticFilter `json:"request_filters,omitempty" yaml:"request_filters,omitempty" mapstructure:"request_filters,omitempty"`

	// RequestFromBuffers corresponds to the JSON schema field "request_from_buffers".
	RequestFromBuffers *bool `json:"request_from_buffers,omitempty" yaml:"request_from_buffers,omitempty" mapstructure:"request_from_buffers,omitempty"`

	// Station corresponds to the JSON schema field "station".
	Station *string `json:"station,omitempty" yaml:"station,omitempty" mapstructure:"station,omitempty"`

	// SwitchState corresponds to the JSON schema field "switch_state".
	SwitchState *bool `json:"switch_state,omitempty" yaml:"switch_state,omitempty" mapstructure:"switch_state,omitempty"`

	// Tags corresponds to the JSON schema field "tags".
	Tags EntityTags `json:"tags,omitempty" yaml:"tags,omitempty" mapstructure:"tags,omitempty"`

	// TrunkInventory corresponds to the JSON schema field "trunk_inventory".
	TrunkInventory *Inventory `json:"trunk_inventory,omitempty" yaml:"trunk_inventory,omitempty" mapstructure:"trunk_inventory,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type *EntityType `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// Variation corresponds to the JSON schema field "variation".
	Variation *int `json:"variation,omitempty" yaml:"variation,omitempty" mapstructure:"variation,omitempty"`
}

type EntityFilterMode string

const EntityFilterModeBlacklist EntityFilterMode = "blacklist"
const EntityFilterModeWhitelist EntityFilterMode = "whitelist"

type EntityInputPriority string

const EntityInputPriorityLeft EntityInputPriority = "left"
const EntityInputPriorityRight EntityInputPriority = "right"

type EntityOutputPriority string

const EntityOutputPriorityLeft EntityOutputPriority = "left"
const EntityOutputPriorityRight EntityOutputPriority = "right"

type EntityTags map[string]interface{}

type EntityType string

const EntityTypeInput EntityType = "input"
const EntityTypeOutput EntityType = "output"

// An icon representing an item, fluid, or virtual signal.
type Icon struct {
	// The 1-based index of the icon.
	Index int `json:"index" yaml:"index" mapstructure:"index"`

	// The signal used as the icon.
	Signal SignalID `json:"signal" yaml:"signal" mapstructure:"signal"`
}

// A filter for Infinity container items.
type InfinityFilter struct {
	// Desired item count.
	Count *int `json:"count,omitempty" yaml:"count,omitempty" mapstructure:"count,omitempty"`

	// 1-based index of the filter.
	Index *int `json:"index,omitempty" yaml:"index,omitempty" mapstructure:"index,omitempty"`

	// Mode defining how item count is maintained.
	Mode *InfinityFilterMode `json:"mode,omitempty" yaml:"mode,omitempty" mapstructure:"mode,omitempty"`

	// Name of the item prototype.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

type InfinityFilterMode string

const InfinityFilterModeAtLeast InfinityFilterMode = "at-least"
const InfinityFilterModeAtMost InfinityFilterMode = "at-most"
const InfinityFilterModeExactly InfinityFilterMode = "exactly"

// Settings for Infinity containers.
type InfinitySettings struct {
	// Filters specifying item settings.
	Filters []InfinityFilter `json:"filters,omitempty" yaml:"filters,omitempty" mapstructure:"filters,omitempty"`

	// Whether to remove items not specified in the filters.
	RemoveUnfilteredItems *bool `json:"remove_unfiltered_items,omitempty" yaml:"remove_unfiltered_items,omitempty" mapstructure:"remove_unfiltered_items,omitempty"`
}

// Configuration of an entity's inventory.
type Inventory struct {
	// Index of the first inaccessible slot due to the red 'bar'.
	Bar *int `json:"bar,omitempty" yaml:"bar,omitempty" mapstructure:"bar,omitempty"`

	// Array of item filters.
	Filters []ItemFilter `json:"filters,omitempty" yaml:"filters,omitempty" mapstructure:"filters,omitempty"`
}

// Filter settings for items in an inventory.
type ItemFilter struct {
	// 1-based index of the filter slot.
	Index int `json:"index" yaml:"index" mapstructure:"index"`

	// Name of the item prototype.
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// Item requests by the entity for construction.
type ItemRequest map[string]int

// Filter settings for logistic containers.
type LogisticFilter struct {
	// Requested item count (0 for storage chests).
	Count *int `json:"count,omitempty" yaml:"count,omitempty" mapstructure:"count,omitempty"`

	// 1-based index of the filter slot.
	Index *int `json:"index,omitempty" yaml:"index,omitempty" mapstructure:"index,omitempty"`

	// Name of the item prototype.
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *Entity) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["entity_number"]; !ok || v == nil {
		return fmt.Errorf("field entity_number in Entity: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Entity: required")
	}
	if v, ok := raw["position"]; !ok || v == nil {
		return fmt.Errorf("field position in Entity: required")
	}
	type Plain Entity
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = Entity(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *InfinityFilterMode) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InfinityFilterMode {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InfinityFilterMode, v)
	}
	*j = InfinityFilterMode(v)
	return nil
}

var enumValues_InfinityFilterMode = []interface{}{
	"at-least",
	"at-most",
	"exactly",
}

// Alert settings for a programmable speaker.
type SpeakerAlertParameters struct {
	// Custom message for the alert.
	AlertMessage *string `json:"alert_message,omitempty" yaml:"alert_message,omitempty" mapstructure:"alert_message,omitempty"`

	// Icon displayed with the alert.
	IconSignalID *SignalID `json:"icon_signal_id,omitempty" yaml:"icon_signal_id,omitempty" mapstructure:"icon_signal_id,omitempty"`

	// Whether to show an alert.
	ShowAlert *bool `json:"show_alert,omitempty" yaml:"show_alert,omitempty" mapstructure:"show_alert,omitempty"`

	// Whether to show the alert on the map.
	ShowOnMap *bool `json:"show_on_map,omitempty" yaml:"show_on_map,omitempty" mapstructure:"show_on_map,omitempty"`
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *EntityFilterMode) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EntityFilterMode {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EntityFilterMode, v)
	}
	*j = EntityFilterMode(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EntityFilterMode) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EntityFilterMode {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EntityFilterMode, v)
	}
	*j = EntityFilterMode(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *SignalID) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in SignalID: required")
	}
	type Plain SignalID
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = SignalID(plain)
	return nil
}

var enumValues_EntityInputPriority = []interface{}{
	"right",
	"left",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EntityInputPriority) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EntityInputPriority {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EntityInputPriority, v)
	}
	*j = EntityInputPriority(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *EntityInputPriority) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EntityInputPriority {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EntityInputPriority, v)
	}
	*j = EntityInputPriority(v)
	return nil
}

type SignalIDType string

// UnmarshalJSON implements json.Unmarshaler.
func (j *SignalID) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in SignalID: required")
	}
	type Plain SignalID
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SignalID(plain)
	return nil
}

var enumValues_EntityFilterMode = []interface{}{
	"whitelist",
	"blacklist",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ItemFilter) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["index"]; !ok || v == nil {
		return fmt.Errorf("field index in ItemFilter: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in ItemFilter: required")
	}
	type Plain ItemFilter
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ItemFilter(plain)
	return nil
}

var enumValues_EntityOutputPriority = []interface{}{
	"right",
	"left",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EntityOutputPriority) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EntityOutputPriority {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EntityOutputPriority, v)
	}
	*j = EntityOutputPriority(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *EntityOutputPriority) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EntityOutputPriority {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EntityOutputPriority, v)
	}
	*j = EntityOutputPriority(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *Position) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["x"]; !ok || v == nil {
		return fmt.Errorf("field x in Position: required")
	}
	if v, ok := raw["y"]; !ok || v == nil {
		return fmt.Errorf("field y in Position: required")
	}
	type Plain Position
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = Position(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Position) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["x"]; !ok || v == nil {
		return fmt.Errorf("field x in Position: required")
	}
	if v, ok := raw["y"]; !ok || v == nil {
		return fmt.Errorf("field y in Position: required")
	}
	type Plain Position
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Position(plain)
	return nil
}

// Playback settings for a programmable speaker.
type SpeakerParameters struct {
	// Whether multiple sounds can play simultaneously.
	AllowPolyphony *bool `json:"allow_polyphony,omitempty" yaml:"allow_polyphony,omitempty" mapstructure:"allow_polyphony,omitempty"`

	// Whether the sound plays globally.
	PlaybackGlobally *bool `json:"playback_globally,omitempty" yaml:"playback_globally,omitempty" mapstructure:"playback_globally,omitempty"`

	// Volume of the speaker.
	PlaybackVolume *float64 `json:"playback_volume,omitempty" yaml:"playback_volume,omitempty" mapstructure:"playback_volume,omitempty"`
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *ConnectionData) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["entity_id"]; !ok || v == nil {
		return fmt.Errorf("field entity_id in ConnectionData: required")
	}
	type Plain ConnectionData
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = ConnectionData(plain)
	return nil
}

// A position in 2D space.
type Position struct {
	// The x-coordinate.
	X float64 `json:"x" yaml:"x" mapstructure:"x"`

	// The y-coordinate.
	Y float64 `json:"y" yaml:"y" mapstructure:"y"`
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *ItemFilter) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["index"]; !ok || v == nil {
		return fmt.Errorf("field index in ItemFilter: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in ItemFilter: required")
	}
	type Plain ItemFilter
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = ItemFilter(plain)
	return nil
}

var enumValues_EntityType = []interface{}{
	"input",
	"output",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EntityType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EntityType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EntityType, v)
	}
	*j = EntityType(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *EntityType) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EntityType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EntityType, v)
	}
	*j = EntityType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Color) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["b"]; !ok || v == nil {
		return fmt.Errorf("field b in Color: required")
	}
	if v, ok := raw["g"]; !ok || v == nil {
		return fmt.Errorf("field g in Color: required")
	}
	if v, ok := raw["r"]; !ok || v == nil {
		return fmt.Errorf("field r in Color: required")
	}
	type Plain Color
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Color(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *Color) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["b"]; !ok || v == nil {
		return fmt.Errorf("field b in Color: required")
	}
	if v, ok := raw["g"]; !ok || v == nil {
		return fmt.Errorf("field g in Color: required")
	}
	if v, ok := raw["r"]; !ok || v == nil {
		return fmt.Errorf("field r in Color: required")
	}
	type Plain Color
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = Color(plain)
	return nil
}

// An identifier for a signal in the game.
type SignalID struct {
	// The name of the signal.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// The type of the signal.
	Type *SignalIDType `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Entity) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["entity_number"]; !ok || v == nil {
		return fmt.Errorf("field entity_number in Entity: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Entity: required")
	}
	if v, ok := raw["position"]; !ok || v == nil {
		return fmt.Errorf("field position in Entity: required")
	}
	type Plain Entity
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Entity(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *InfinityFilterMode) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_InfinityFilterMode {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_InfinityFilterMode, v)
	}
	*j = InfinityFilterMode(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ConnectionData) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["entity_id"]; !ok || v == nil {
		return fmt.Errorf("field entity_id in ConnectionData: required")
	}
	type Plain ConnectionData
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ConnectionData(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Icon) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["index"]; !ok || v == nil {
		return fmt.Errorf("field index in Icon: required")
	}
	if v, ok := raw["signal"]; !ok || v == nil {
		return fmt.Errorf("field signal in Icon: required")
	}
	type Plain Icon
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Icon(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *Icon) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["index"]; !ok || v == nil {
		return fmt.Errorf("field index in Icon: required")
	}
	if v, ok := raw["signal"]; !ok || v == nil {
		return fmt.Errorf("field signal in Icon: required")
	}
	type Plain Icon
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = Icon(plain)
	return nil
}

type WaitConditionCompareType string

var enumValues_WaitConditionCompareType = []interface{}{
	"and",
	"or",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *WaitConditionCompareType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WaitConditionCompareType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WaitConditionCompareType, v)
	}
	*j = WaitConditionCompareType(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *WaitConditionCompareType) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_WaitConditionCompareType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_WaitConditionCompareType, v)
	}
	*j = WaitConditionCompareType(v)
	return nil
}

const WaitConditionCompareTypeAnd WaitConditionCompareType = "and"
const WaitConditionCompareTypeOr WaitConditionCompareType = "or"

// A condition defining how long a train waits at a station.
type WaitCondition struct {
	// Logical operator for combining conditions.
	CompareType *WaitConditionCompareType `json:"compare_type,omitempty" yaml:"compare_type,omitempty" mapstructure:"compare_type,omitempty"`

	// Number of ticks to wait (used with 'time' or 'inactivity' types).
	Ticks *int `json:"ticks,omitempty" yaml:"ticks,omitempty" mapstructure:"ticks,omitempty"`

	// Type of the wait condition.
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// A single record in a train schedule.
type ScheduleRecord struct {
	// Name of the train stop.
	Station *string `json:"station,omitempty" yaml:"station,omitempty" mapstructure:"station,omitempty"`

	// Conditions under which the train waits at this stop.
	WaitConditions []WaitCondition `json:"wait_conditions,omitempty" yaml:"wait_conditions,omitempty" mapstructure:"wait_conditions,omitempty"`
}

// Train schedule data.
type Schedule struct {
	// Entity numbers of locomotives using this schedule.
	Locomotives []int `json:"locomotives,omitempty" yaml:"locomotives,omitempty" mapstructure:"locomotives,omitempty"`

	// Array of schedule records.
	Schedule []ScheduleRecord `json:"schedule,omitempty" yaml:"schedule,omitempty" mapstructure:"schedule,omitempty"`
}

// A tile placed within the blueprint.
type Tile struct {
	// The prototype name of the tile.
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// The position of the tile on the blueprint grid.
	Position Position `json:"position" yaml:"position" mapstructure:"position"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Tile) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Tile: required")
	}
	if v, ok := raw["position"]; !ok || v == nil {
		return fmt.Errorf("field position in Tile: required")
	}
	type Plain Tile
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Tile(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *Tile) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Tile: required")
	}
	if v, ok := raw["position"]; !ok || v == nil {
		return fmt.Errorf("field position in Tile: required")
	}
	type Plain Tile
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = Tile(plain)
	return nil
}

const SignalIDTypeVirtual SignalIDType = "virtual"

// UnmarshalJSON implements json.Unmarshaler.
func (j *Blueprint) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["entities"]; !ok || v == nil {
		return fmt.Errorf("field entities in Blueprint: required")
	}
	if v, ok := raw["icons"]; !ok || v == nil {
		return fmt.Errorf("field icons in Blueprint: required")
	}
	if v, ok := raw["item"]; !ok || v == nil {
		return fmt.Errorf("field item in Blueprint: required")
	}
	if v, ok := raw["version"]; !ok || v == nil {
		return fmt.Errorf("field version in Blueprint: required")
	}
	type Plain Blueprint
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Blueprint(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *Blueprint) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["entities"]; !ok || v == nil {
		return fmt.Errorf("field entities in Blueprint: required")
	}
	if v, ok := raw["icons"]; !ok || v == nil {
		return fmt.Errorf("field icons in Blueprint: required")
	}
	if v, ok := raw["item"]; !ok || v == nil {
		return fmt.Errorf("field item in Blueprint: required")
	}
	if v, ok := raw["version"]; !ok || v == nil {
		return fmt.Errorf("field version in Blueprint: required")
	}
	type Plain Blueprint
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = Blueprint(plain)
	return nil
}

const SignalIDTypeFluid SignalIDType = "fluid"

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlueprintSchemaJSONBlueprintBookBlueprintsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["blueprint"]; !ok || v == nil {
		return fmt.Errorf("field blueprint in BlueprintSchemaJSONBlueprintBookBlueprintsElem: required")
	}
	if v, ok := raw["index"]; !ok || v == nil {
		return fmt.Errorf("field index in BlueprintSchemaJSONBlueprintBookBlueprintsElem: required")
	}
	type Plain BlueprintSchemaJSONBlueprintBookBlueprintsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlueprintSchemaJSONBlueprintBookBlueprintsElem(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *BlueprintSchemaJSONBlueprintBookBlueprintsElem) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["blueprint"]; !ok || v == nil {
		return fmt.Errorf("field blueprint in BlueprintSchemaJSONBlueprintBookBlueprintsElem: required")
	}
	if v, ok := raw["index"]; !ok || v == nil {
		return fmt.Errorf("field index in BlueprintSchemaJSONBlueprintBookBlueprintsElem: required")
	}
	type Plain BlueprintSchemaJSONBlueprintBookBlueprintsElem
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = BlueprintSchemaJSONBlueprintBookBlueprintsElem(plain)
	return nil
}

const SignalIDTypeItem SignalIDType = "item"

var enumValues_BlueprintSchemaJSONBlueprintBookItem = []interface{}{
	"blueprint-book",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlueprintSchemaJSONBlueprintBookItem) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BlueprintSchemaJSONBlueprintBookItem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BlueprintSchemaJSONBlueprintBookItem, v)
	}
	*j = BlueprintSchemaJSONBlueprintBookItem(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *BlueprintSchemaJSONBlueprintBookItem) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_BlueprintSchemaJSONBlueprintBookItem {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_BlueprintSchemaJSONBlueprintBookItem, v)
	}
	*j = BlueprintSchemaJSONBlueprintBookItem(v)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *SignalIDType) UnmarshalYAML(value *yaml.Node) error {
	var v string
	if err := value.Decode(&v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SignalIDType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SignalIDType, v)
	}
	*j = SignalIDType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SignalIDType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_SignalIDType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_SignalIDType, v)
	}
	*j = SignalIDType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlueprintSchemaJSONBlueprintBook) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["blueprints"]; !ok || v == nil {
		return fmt.Errorf("field blueprints in BlueprintSchemaJSONBlueprintBook: required")
	}
	if v, ok := raw["item"]; !ok || v == nil {
		return fmt.Errorf("field item in BlueprintSchemaJSONBlueprintBook: required")
	}
	if v, ok := raw["version"]; !ok || v == nil {
		return fmt.Errorf("field version in BlueprintSchemaJSONBlueprintBook: required")
	}
	type Plain BlueprintSchemaJSONBlueprintBook
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlueprintSchemaJSONBlueprintBook(plain)
	return nil
}

// UnmarshalYAML implements yaml.Unmarshaler.
func (j *BlueprintSchemaJSONBlueprintBook) UnmarshalYAML(value *yaml.Node) error {
	var raw map[string]interface{}
	if err := value.Decode(&raw); err != nil {
		return err
	}
	if v, ok := raw["blueprints"]; !ok || v == nil {
		return fmt.Errorf("field blueprints in BlueprintSchemaJSONBlueprintBook: required")
	}
	if v, ok := raw["item"]; !ok || v == nil {
		return fmt.Errorf("field item in BlueprintSchemaJSONBlueprintBook: required")
	}
	if v, ok := raw["version"]; !ok || v == nil {
		return fmt.Errorf("field version in BlueprintSchemaJSONBlueprintBook: required")
	}
	type Plain BlueprintSchemaJSONBlueprintBook
	var plain Plain
	if err := value.Decode(&plain); err != nil {
		return err
	}
	*j = BlueprintSchemaJSONBlueprintBook(plain)
	return nil
}

var enumValues_SignalIDType = []interface{}{
	"item",
	"fluid",
	"virtual",
}
