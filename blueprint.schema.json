{
  "$id": "https://wiki.factorio.com/Blueprint_string_format",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Factorio Blueprint Format",
  "type": "object",
  "properties": {
    "blueprint": { "$ref": "#/definitions/blueprint" },
    "blueprint-book": {
      "type": "object",
      "properties": {
        "item": { "type": "string", "enum": ["blueprint-book"] },
        "label": { "type": "string" },
        "label_color": { "$ref": "#/definitions/color" },
        "blueprints": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "index": { "type": "integer" },
              "blueprint": { "$ref": "#/definitions/blueprint" }
            },
            "required": ["index", "blueprint"]
          }
        },
        "active_index": { "type": "integer" },
        "icons": { "type": "array", "items": { "$ref": "#/definitions/icon" } },
        "description": { "type": "string" },
        "version": { "type": "integer" }
      },
      "required": ["item", "blueprints", "version"]
    }
  },
  "definitions": {
    "blueprint": {
      "type": "object",
      "description": "An object representing a Factorio blueprint.",
      "properties": {
        "item": {
          "type": "string",
          "description": "The name of the item; usually 'blueprint' in vanilla Factorio."
        },
        "label": {
          "type": "string",
          "description": "The user-defined name of the blueprint."
        },
        "label_color": {
          "$ref": "#/definitions/color",
          "description": "The color assigned to the blueprint's label."
        },
        "entities": {
          "type": "array",
          "items": { "$ref": "#/definitions/entity" },
          "description": "An array of entities included in the blueprint."
        },
        "tiles": {
          "type": "array",
          "items": { "$ref": "#/definitions/tile" },
          "description": "An array of tiles included in the blueprint."
        },
        "icons": {
          "type": "array",
          "items": { "$ref": "#/definitions/icon" },
          "description": "Icons set by the user for the blueprint."
        },
        "schedules": {
          "type": "array",
          "items": { "$ref": "#/definitions/schedule" },
          "description": "Train schedules included in the blueprint."
        },
        "description": {
          "type": "string",
          "description": "An optional description of the blueprint."
        },
        "snap-to-grid": {
          "$ref": "#/definitions/position",
          "description": "Dimensions of the grid used for snapping."
        },
        "absolute-snapping": {
          "type": "boolean",
          "description": "Indicates if absolute snapping is enabled."
        },
        "position-relative-to-grid": {
          "$ref": "#/definitions/position",
          "description": "Offset relative to the global snapping grid."
        },
        "version": {
          "type": "integer",
          "description": "The game version when the blueprint was created."
        }
      },
      "required": ["item", "entities", "icons", "version"]
    },
    "icon": {
      "type": "object",
      "description": "An icon representing an item, fluid, or virtual signal.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The 1-based index of the icon."
        },
        "signal": {
          "$ref": "#/definitions/signalID",
          "description": "The signal used as the icon."
        }
      },
      "required": ["index", "signal"]
    },
    "signalID": {
      "type": "object",
      "description": "An identifier for a signal in the game.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the signal."
        },
        "type": {
          "type": "string",
          "enum": ["item", "fluid", "virtual"],
          "description": "The type of the signal."
        }
      },
      "required": ["name"]
    },
    "entity": {
      "type": "object",
      "description": "An entity placed within the blueprint.",
      "properties": {
        "entity_number": {
          "type": "integer",
          "description": "A unique identifier for the entity within the blueprint."
        },
        "name": {
          "type": "string",
          "description": "The prototype name of the entity."
        },
        "position": {
          "$ref": "#/definitions/position",
          "description": "The position of the entity on the blueprint grid."
        },
        "direction": {
          "type": "integer",
          "description": "The direction the entity is facing."
        },
        "orientation": {
          "type": "number",
          "description": "The orientation of the entity, ranging from 0 to 1."
        },
        "connections": {
          "$ref": "#/definitions/connection",
          "description": "Circuit connections made by the entity."
        },
        "neighbours": {
          "type": "array",
          "items": { "type": "integer" },
          "description": "Copper wire connections to other entities."
        },
        "control_behavior": { "$ref": "#/definitions/controlBehavior" },
        "items": { "$ref": "#/definitions/itemRequest" },
        "recipe": { "type": "string" },
        "bar": { "type": "integer" },
        "ammo_inventory": { "$ref": "#/definitions/inventory" },
        "trunk_inventory": { "$ref": "#/definitions/inventory" },
        "inventory": { "$ref": "#/definitions/inventory" },
        "infinity_settings": { "$ref": "#/definitions/infinitySettings" },
        "type": { "type": "string", "enum": ["input", "output"] },
        "input_priority": { "type": "string", "enum": ["right", "left"] },
        "output_priority": { "type": "string", "enum": ["right", "left"] },
        "filter": { "type": "string" },
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/itemFilter" }
        },
        "filter_mode": { "type": "string", "enum": ["whitelist", "blacklist"] },
        "override_stack_size": { "type": "integer" },
        "drop_position": { "$ref": "#/definitions/position" },
        "pickup_position": { "$ref": "#/definitions/position" },
        "request_filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/logisticFilter" }
        },
        "request_from_buffers": { "type": "boolean" },
        "parameters": { "$ref": "#/definitions/speakerParameters" },
        "alert_parameters": { "$ref": "#/definitions/speakerAlertParameters" },
        "auto_launch": { "type": "boolean" },
        "variation": { "type": "integer" },
        "color": { "$ref": "#/definitions/color" },
        "station": { "type": "string" },
        "manual_trains_limit": { "type": "integer" },
        "switch_state": { "type": "boolean" },
        "tags": { "type": "object" }
      },
      "required": ["entity_number", "name", "position"]
    },
    "tile": {
      "type": "object",
      "description": "A tile placed within the blueprint.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The prototype name of the tile."
        },
        "position": {
          "$ref": "#/definitions/position",
          "description": "The position of the tile on the blueprint grid."
        }
      },
      "required": ["name", "position"]
    },
    "position": {
      "type": "object",
      "description": "A position in 2D space.",
      "properties": {
        "x": {
          "type": "number",
          "description": "The x-coordinate."
        },
        "y": {
          "type": "number",
          "description": "The y-coordinate."
        }
      },
      "required": ["x", "y"]
    },
    "connection": {
      "type": "object",
      "description": "Circuit network connections for an entity.",
      "properties": {
        "1": {
          "$ref": "#/definitions/connectionPoint",
          "description": "First connection point."
        },
        "2": {
          "$ref": "#/definitions/connectionPoint",
          "description": "Second connection point (if applicable)."
        }
      }
    },
    "connectionPoint": {
      "type": "object",
      "description": "A connection point for circuit network wires.",
      "properties": {
        "red": {
          "type": "array",
          "items": { "$ref": "#/definitions/connectionData" },
          "description": "Connections made with red wires."
        },
        "green": {
          "type": "array",
          "items": { "$ref": "#/definitions/connectionData" },
          "description": "Connections made with green wires."
        }
      }
    },
    "connectionData": {
      "type": "object",
      "description": "Information about a single circuit network connection.",
      "properties": {
        "entity_id": {
          "type": "integer",
          "description": "Entity number of the connected entity."
        },
        "circuit_id": {
          "type": "integer",
          "description": "Circuit connector ID of the connected entity."
        }
      },
      "required": ["entity_id"]
    },
    "itemRequest": {
      "type": "object",
      "description": "Item requests by the entity for construction.",
      "additionalProperties": {
        "type": "integer",
        "description": "Quantity of the requested item."
      }
    },
    "itemFilter": {
      "type": "object",
      "description": "Filter settings for items in an inventory.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the item prototype."
        },
        "index": {
          "type": "integer",
          "description": "1-based index of the filter slot."
        }
      },
      "required": ["name", "index"]
    },
    "inventory": {
      "type": "object",
      "description": "Configuration of an entity's inventory.",
      "properties": {
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/itemFilter" },
          "description": "Array of item filters."
        },
        "bar": {
          "type": "integer",
          "description": "Index of the first inaccessible slot due to the red 'bar'."
        }
      }
    },
    "infinitySettings": {
      "type": "object",
      "description": "Settings for Infinity containers.",
      "properties": {
        "remove_unfiltered_items": {
          "type": "boolean",
          "description": "Whether to remove items not specified in the filters."
        },
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/infinityFilter" },
          "description": "Filters specifying item settings."
        }
      }
    },
    "infinityFilter": {
      "type": "object",
      "description": "A filter for Infinity container items.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the item prototype."
        },
        "count": {
          "type": "integer",
          "description": "Desired item count."
        },
        "mode": {
          "type": "string",
          "enum": ["at-least", "at-most", "exactly"],
          "description": "Mode defining how item count is maintained."
        },
        "index": {
          "type": "integer",
          "description": "1-based index of the filter."
        }
      }
    },
    "logisticFilter": {
      "type": "object",
      "description": "Filter settings for logistic containers.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the item prototype."
        },
        "index": {
          "type": "integer",
          "description": "1-based index of the filter slot."
        },
        "count": {
          "type": "integer",
          "description": "Requested item count (0 for storage chests)."
        }
      }
    },
    "schedule": {
      "type": "object",
      "description": "Train schedule data.",
      "properties": {
        "schedule": {
          "type": "array",
          "items": { "$ref": "#/definitions/scheduleRecord" },
          "description": "Array of schedule records."
        },
        "locomotives": {
          "type": "array",
          "items": { "type": "integer" },
          "description": "Entity numbers of locomotives using this schedule."
        }
      }
    },
    "scheduleRecord": {
      "type": "object",
      "description": "A single record in a train schedule.",
      "properties": {
        "station": {
          "type": "string",
          "description": "Name of the train stop."
        },
        "wait_conditions": {
          "type": "array",
          "items": { "$ref": "#/definitions/waitCondition" },
          "description": "Conditions under which the train waits at this stop."
        }
      }
    },
    "waitCondition": {
      "type": "object",
      "description": "A condition defining how long a train waits at a station.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the wait condition."
        },
        "compare_type": {
          "type": "string",
          "enum": ["and", "or"],
          "description": "Logical operator for combining conditions."
        },
        "ticks": {
          "type": "integer",
          "description": "Number of ticks to wait (used with 'time' or 'inactivity' types)."
        }
      }
    },
    "color": {
      "type": "object",
      "description": "A color with RGBA components.",
      "properties": {
        "r": {
          "type": "number",
          "description": "Red component (0 to 1)."
        },
        "g": {
          "type": "number",
          "description": "Green component (0 to 1)."
        },
        "b": {
          "type": "number",
          "description": "Blue component (0 to 1)."
        },
        "a": {
          "type": "number",
          "description": "Alpha (transparency) component (0 to 1)."
        }
      },
      "required": ["r", "g", "b"]
    },
    "controlBehavior": {
      "type": "object",
      "description": "Control behavior settings for entities.",
      "properties": {
        "circuit_condition": {
          "$ref": "#/definitions/condition",
          "description": "Condition for circuit network signals."
        },
        "logistic_condition": {
          "$ref": "#/definitions/condition",
          "description": "Condition for logistic network signals."
        },
        "arithmetic_conditions": {
          "$ref": "#/definitions/arithmeticConditions",
          "description": "Settings for arithmetic combinators."
        },
        "decider_conditions": {
          "$ref": "#/definitions/deciderConditions",
          "description": "Settings for decider combinators."
        },
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/itemFilter" },
          "description": "Filters used by constant combinators and other entities."
        },
        "is_on": {
          "type": "boolean",
          "description": "Indicates if the entity is active."
        }
      }
    },
    "condition": {
      "type": "object",
      "description": "A circuit or logistic condition.",
      "properties": {
        "first_signal": {
          "$ref": "#/definitions/signalID",
          "description": "The first signal in the condition."
        },
        "second_signal": {
          "$ref": "#/definitions/signalID",
          "description": "The second signal in the condition."
        },
        "comparator": {
          "type": "string",
          "description": "Comparator operator (e.g., '>', '=', '<')."
        },
        "constant": {
          "type": "integer",
          "description": "A constant value used in the condition."
        }
      }
    },
    "arithmeticConditions": {
      "type": "object",
      "description": "Parameters for arithmetic combinators.",
      "properties": {
        "first_signal": {
          "$ref": "#/definitions/signalID",
          "description": "First input signal."
        },
        "second_signal": {
          "$ref": "#/definitions/signalID",
          "description": "Second input signal."
        },
        "operation": {
          "type": "string",
          "description": "Arithmetic operation (e.g., '+', '-', '*', '/')."
        },
        "output_signal": {
          "$ref": "#/definitions/signalID",
          "description": "Signal where the result is stored."
        }
      }
    },
    "deciderConditions": {
      "type": "object",
      "description": "Parameters for decider combinators.",
      "properties": {
        "first_signal": {
          "$ref": "#/definitions/signalID",
          "description": "First input signal."
        },
        "second_signal": {
          "$ref": "#/definitions/signalID",
          "description": "Second input signal."
        },
        "comparator": {
          "type": "string",
          "description": "Comparator operator."
        },
        "constant": {
          "type": "integer",
          "description": "Constant value for comparison."
        },
        "output_signal": {
          "$ref": "#/definitions/signalID",
          "description": "Signal to output when condition is true."
        },
        "copy_count_from_input": {
          "type": "boolean",
          "description": "Whether to copy the input count to the output."
        }
      }
    },
    "speakerParameters": {
      "type": "object",
      "description": "Playback settings for a programmable speaker.",
      "properties": {
        "playback_volume": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Volume of the speaker."
        },
        "playback_globally": {
          "type": "boolean",
          "description": "Whether the sound plays globally."
        },
        "allow_polyphony": {
          "type": "boolean",
          "description": "Whether multiple sounds can play simultaneously."
        }
      }
    },
    "speakerAlertParameters": {
      "type": "object",
      "description": "Alert settings for a programmable speaker.",
      "properties": {
        "show_alert": {
          "type": "boolean",
          "description": "Whether to show an alert."
        },
        "show_on_map": {
          "type": "boolean",
          "description": "Whether to show the alert on the map."
        },
        "icon_signal_id": {
          "$ref": "#/definitions/signalID",
          "description": "Icon displayed with the alert."
        },
        "alert_message": {
          "type": "string",
          "description": "Custom message for the alert."
        }
      }
    }
  }
}
