{
  "$id": "https://wiki.factorio.com/Blueprint_string_format",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Factorio Blueprint Format",
  "type": "object",
  "properties": {
    "blueprint": { "$ref": "#/definitions/blueprint" },
    "blueprint-book": { "$ref": "#/definitions/blueprint-book" }
  },
  "definitions": {
    "blueprint": {
      "type": "object",
      "description": "An object representing a Factorio blueprint.",
      "properties": {
        "item": {
          "type": "string",
          "description": "The name of the item; usually 'blueprint' in vanilla Factorio."
        },
        "label": {
          "type": "string",
          "description": "The user-defined name of the blueprint."
        },
        "label_color": {
          "$ref": "#/definitions/color",
          "description": "The color assigned to the blueprint's label."
        },
        "entities": {
          "type": "array",
          "items": { "$ref": "#/definitions/entity" },
          "description": "An array of entities included in the blueprint."
        },
        "tiles": {
          "type": "array",
          "items": { "$ref": "#/definitions/tile" },
          "description": "An array of tiles included in the blueprint."
        },
        "icons": {
          "type": "array",
          "items": { "$ref": "#/definitions/icon" },
          "description": "Icons set by the user for the blueprint."
        },
        "schedules": {
          "type": "array",
          "items": { "$ref": "#/definitions/schedule" },
          "description": "Train schedules included in the blueprint."
        },
        "description": {
          "type": "string",
          "description": "An optional description of the blueprint."
        },
        "snap-to-grid": {
          "$ref": "#/definitions/position",
          "description": "Dimensions of the grid used for snapping."
        },
        "absolute-snapping": {
          "type": "boolean",
          "description": "Indicates if absolute snapping is enabled."
        },
        "position-relative-to-grid": {
          "$ref": "#/definitions/position",
          "description": "Offset relative to the global snapping grid."
        },
        "version": {
          "type": "integer",
          "description": "The game version when the blueprint was created."
        }
      },
      "required": ["item", "entities", "icons", "version"]
    },
    "blueprint-book": {
      "type": "object",
      "description": "An object representing a Factorio blueprint book.",
      "properties": {
        "item": {
          "type": "string",
          "enum": ["blueprint-book"],
          "description": "The name of the item; usually 'blueprint-book' in vanilla Factorio."
        },
        "label": {
          "type": "string",
          "description": "The user-defined name of the blueprint book."
        },
        "label_color": {
          "$ref": "#/definitions/color",
          "description": "The color assigned to the blueprint book's label."
        },
        "blueprints": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "index": {
                "type": "integer",
                "description": "Index of the blueprint in the book, 0-based."
              },
              "blueprint": {
                "$ref": "#/definitions/blueprint",
                "description": "A blueprint object."
              }
            },
            "required": ["index", "blueprint"],
            "description": "An array containing the blueprints included in the book."
          },
          "description": "The content of the blueprint book."
        },
        "active_index": {
          "type": "integer",
          "description": "Index of the currently selected blueprint, 0-based."
        },
        "icons": {
          "type": "array",
          "items": { "$ref": "#/definitions/icon" },
          "description": "Icons set by the user for the blueprint book."
        },
        "description": {
          "type": "string",
          "description": "An optional description of the blueprint book."
        },
        "version": {
          "type": "integer",
          "description": "The game version when the blueprint book was created."
        }
      },
      "required": ["item", "blueprints", "version"]
    },
    "icon": {
      "type": "object",
      "description": "An icon representing an item, fluid, or virtual signal.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "The 1-based index of the icon.",
          "minimum": 1
        },
        "signal": {
          "$ref": "#/definitions/signalID",
          "description": "The signal used as the icon."
        }
      },
      "required": ["index", "signal"]
    },
    "signalID": {
      "type": "object",
      "description": "An identifier for a signal in the game.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the signal."
        },
        "type": {
          "type": "string",
          "enum": ["item", "fluid", "virtual"],
          "description": "The type of the signal."
        }
      },
      "required": ["name"]
    },
    "entity": {
      "type": "object",
      "description": "An entity placed within the blueprint.",
      "properties": {
        "entity_number": {
          "type": "integer",
          "description": "Index of the entity, 1-based.",
          "minimum": 1
        },
        "name": {
          "type": "string",
          "description": "Prototype name of the entity (e.g., \"offshore-pump\")."
        },
        "position": {
          "$ref": "#/definitions/position",
          "description": "Position of the entity within the blueprint."
        },
        "direction": {
          "type": "integer",
          "description": "Direction of the entity, uint (optional)."
        },
        "orientation": {
          "type": "number",
          "description": "Orientation of cargo wagon or locomotive, value 0 to 1 (optional).",
          "minimum": 0,
          "maximum": 1
        },
        "connections": {
          "$ref": "#/definitions/connection",
          "description": "Circuit connections (optional)."
        },
        "neighbours": {
          "type": "array",
          "items": { "type": "integer" },
          "description": "Copper wire connections, array of entity_numbers (optional)."
        },
        "control_behavior": {
          "$ref": "#/definitions/controlBehavior",
          "description": "Control behavior of this entity (optional)."
        },
        "items": {
          "$ref": "#/definitions/itemRequest",
          "description": "Item requests by this entity (optional)."
        },
        "recipe": {
          "type": "string",
          "description": "Name of the recipe prototype this assembling machine is set to (optional)."
        },
        "bar": {
          "type": "integer",
          "description": "Index of the first inaccessible item slot due to limiting with the red \"bar\" (optional)."
        },
        "ammo_inventory": {
          "$ref": "#/definitions/inventory",
          "description": "Ammo inventory of an entity (e.g., Spidertron) (optional)."
        },
        "trunk_inventory": {
          "$ref": "#/definitions/inventory",
          "description": "Boot/Luggage inventory of an entity (e.g., storage inventory of a Spidertron) (optional)."
        },
        "inventory": {
          "$ref": "#/definitions/inventory",
          "description": "Cargo wagon inventory configuration (optional)."
        },
        "infinity_settings": {
          "$ref": "#/definitions/infinitySettings",
          "description": "Used by InfinityContainer (optional)."
        },
        "type": {
          "type": "string",
          "enum": ["input", "output"],
          "description": "Type of the underground belt or loader (optional)."
        },
        "input_priority": {
          "type": "string",
          "enum": ["right", "left"],
          "description": "Input priority of the splitter (optional)."
        },
        "output_priority": {
          "type": "string",
          "enum": ["right", "left"],
          "description": "Output priority of the splitter (optional)."
        },
        "filter": {
          "type": "string",
          "description": "Filter of the splitter; name of the item prototype (optional)."
        },
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/itemFilter" },
          "description": "Filters of the filter inserter or loader (optional)."
        },
        "filter_mode": {
          "type": "string",
          "enum": ["whitelist", "blacklist"],
          "description": "Filter mode of the filter inserter (optional)."
        },
        "override_stack_size": {
          "type": "integer",
          "description": "Stack size the inserter is set to (optional)."
        },
        "drop_position": {
          "$ref": "#/definitions/position",
          "description": "Drop position the inserter is set to (optional)."
        },
        "pickup_position": {
          "$ref": "#/definitions/position",
          "description": "Pickup position the inserter is set to (optional)."
        },
        "request_filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/logisticFilter" },
          "description": "Used by LogisticContainer; array of logistic filters (optional)."
        },
        "request_from_buffers": {
          "type": "boolean",
          "description": "Whether the requester chest can request from buffer chests (optional)."
        },
        "parameters": {
          "$ref": "#/definitions/speakerParameters",
          "description": "Used by Programmable Speaker (optional)."
        },
        "alert_parameters": {
          "$ref": "#/definitions/speakerAlertParameters",
          "description": "Used by Programmable Speaker (optional)."
        },
        "auto_launch": {
          "type": "boolean",
          "description": "Used by the rocket silo; whether auto launch is enabled (optional)."
        },
        "variation": {
          "type": "integer",
          "description": "Used by SimpleEntityWithForce or SimpleEntityWithOwner (optional)."
        },
        "color": {
          "$ref": "#/definitions/color",
          "description": "Color of the entity (optional)."
        },
        "station": {
          "type": "string",
          "description": "Name of the train station (optional)."
        },
        "manual_trains_limit": {
          "type": "integer",
          "description": "Manually set train limit of the train station (optional)."
        },
        "switch_state": {
          "type": "boolean",
          "description": "Current state of the power switch (optional)."
        },
        "tags": {
          "type": "object",
          "description": "Dictionary of arbitrary data (optional)."
        },
        "player_description": {
          "type": "string",
          "description": "Player-defined description for the entity."
        }
      },
      "required": ["entity_number", "name", "position"]
    },
    "tile": {
      "type": "object",
      "description": "A tile placed within the blueprint.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The prototype name of the tile."
        },
        "position": {
          "$ref": "#/definitions/position",
          "description": "The position of the tile on the blueprint grid."
        }
      },
      "required": ["name", "position"]
    },
    "position": {
      "type": "object",
      "description": "A position in 2D space.",
      "properties": {
        "x": {
          "type": "number",
          "description": "The x-coordinate."
        },
        "y": {
          "type": "number",
          "description": "The y-coordinate."
        }
      },
      "required": ["x", "y"]
    },
    "connection": {
      "type": "object",
      "description": "Circuit network connections for an entity.",
      "properties": {
        "1": {
          "$ref": "#/definitions/connectionPoint",
          "description": "First connection point."
        },
        "2": {
          "$ref": "#/definitions/connectionPoint",
          "description": "Second connection point (if applicable)."
        }
      }
    },
    "connectionPoint": {
      "type": "object",
      "description": "A connection point for circuit network wires.",
      "properties": {
        "red": {
          "type": "array",
          "items": { "$ref": "#/definitions/connectionData" },
          "description": "Connections made with red wires."
        },
        "green": {
          "type": "array",
          "items": { "$ref": "#/definitions/connectionData" },
          "description": "Connections made with green wires."
        }
      }
    },
    "connectionData": {
      "type": "object",
      "description": "Information about a single circuit network connection.",
      "properties": {
        "entity_id": {
          "type": "integer",
          "description": "Entity number of the connected entity.",
          "minimum": 1
        },
        "circuit_id": {
          "type": "integer",
          "description": "Circuit connector ID of the connected entity."
        }
      },
      "required": ["entity_id"]
    },
    "itemRequest": {
      "type": "object",
      "description": "Item requests by the entity for construction.",
      "additionalProperties": {
        "type": "integer",
        "description": "Quantity of the requested item."
      }
    },
    "itemFilter": {
      "type": "object",
      "description": "Filter settings for items in an inventory.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the item prototype."
        },
        "index": {
          "type": "integer",
          "description": "1-based index of the filter slot."
        }
      },
      "required": ["name", "index"]
    },
    "inventory": {
      "type": "object",
      "description": "Configuration of an entity's inventory.",
      "properties": {
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/itemFilter" },
          "description": "Array of item filters."
        },
        "bar": {
          "type": "integer",
          "description": "Index of the first inaccessible slot due to the red 'bar'."
        }
      }
    },
    "infinitySettings": {
      "type": "object",
      "description": "Settings for Infinity containers.",
      "properties": {
        "remove_unfiltered_items": {
          "type": "boolean",
          "description": "Whether to remove items not specified in the filters."
        },
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/infinityFilter" },
          "description": "Filters specifying item settings."
        }
      }
    },
    "infinityFilter": {
      "type": "object",
      "description": "A filter for Infinity container items.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the item prototype."
        },
        "count": {
          "type": "integer",
          "description": "Desired item count."
        },
        "mode": {
          "type": "string",
          "enum": ["at-least", "at-most", "exactly"],
          "description": "Mode defining how item count is maintained."
        },
        "index": {
          "type": "integer",
          "description": "1-based index of the filter."
        }
      }
    },
    "logisticFilter": {
      "type": "object",
      "description": "Filter settings for logistic containers.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the item prototype."
        },
        "index": {
          "type": "integer",
          "description": "1-based index of the filter slot."
        },
        "count": {
          "type": "integer",
          "description": "Requested item count (0 for storage chests)."
        }
      }
    },
    "schedule": {
      "type": "object",
      "description": "Train schedule data.",
      "properties": {
        "schedule": {
          "type": "array",
          "items": { "$ref": "#/definitions/scheduleRecord" },
          "description": "Array of schedule records."
        },
        "locomotives": {
          "type": "array",
          "items": { "type": "integer" },
          "description": "Entity numbers of locomotives using this schedule."
        }
      }
    },
    "scheduleRecord": {
      "type": "object",
      "description": "A single record in a train schedule.",
      "properties": {
        "station": {
          "type": "string",
          "description": "Name of the train stop."
        },
        "wait_conditions": {
          "type": "array",
          "items": { "$ref": "#/definitions/waitCondition" },
          "description": "Conditions under which the train waits at this stop."
        }
      }
    },
    "waitCondition": {
      "type": "object",
      "description": "A condition defining how long a train waits at a station.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the wait condition."
        },
        "compare_type": {
          "type": "string",
          "enum": ["and", "or"],
          "description": "Logical operator for combining conditions."
        },
        "ticks": {
          "type": "integer",
          "description": "Number of ticks to wait (used with 'time' or 'inactivity' types)."
        }
      }
    },
    "color": {
      "type": "object",
      "description": "A color with RGBA components.",
      "properties": {
        "r": {
          "type": "number",
          "description": "Red component (0 to 1).",
          "minimum": 0,
          "maximum": 1
        },
        "g": {
          "type": "number",
          "description": "Green component (0 to 1).",
          "minimum": 0,
          "maximum": 1
        },
        "b": {
          "type": "number",
          "description": "Blue component (0 to 1).",
          "minimum": 0,
          "maximum": 1
        },
        "a": {
          "type": "number",
          "description": "Alpha (transparency) component (0 to 1).",
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": ["r", "g", "b"]
    },
    "controlBehavior": {
      "type": "object",
      "description": "Control behavior settings for entities.",
      "properties": {
        "circuit_condition": {
          "$ref": "#/definitions/condition",
          "description": "Condition for circuit network signals."
        },
        "logistic_condition": {
          "$ref": "#/definitions/condition",
          "description": "Condition for logistic network signals."
        },
        "arithmetic_conditions": {
          "$ref": "#/definitions/arithmeticConditions",
          "description": "Settings for arithmetic combinators."
        },
        "decider_conditions": {
          "$ref": "#/definitions/deciderConditions",
          "description": "Settings for decider combinators."
        },
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/blueprintLogisticFilter" },
          "description": "Array that used to contain ConstantCombinatorParameters, and now might be BlueprintLogisticFilter -- see https://lua-api.factorio.com/latest/concepts/BlueprintLogisticFilter.html"
        },
        "sections": {
          "type": "object",
          "description": "Sections of the control behavior.",
          "properties": {
            "sections": {
              "type": "array",
              "items": { "$ref": "#/definitions/section" },
              "description": "List of sections in the control behavior."
            }
          }
        },
        "is_on": {
          "type": "boolean",
          "description": "Indicates if the entity is active."
        }
      }
    },
    "blueprintLogisticFilter": {
      "type": "object",
      "description": "A filter used in control behavior.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "1-based index of the filter (a 'LogisticFilterIndex')."
        },
        "name": {
          "type": "string",
          "description": "Name of the item prototype."
        },
        "count": {
          "type": "integer",
          "description": "Requested item count."
        },
        "type": {
          "$ref": "#/definitions/signalID",
          "description": "The type of the logistic filter."
        },
        "quality": {
          "type": "string",
          "description": "The prototype name of the quality. nil for any quality."
        },
        "comparator": {
          "type": "string",
          "description": "The comparator for quality. nil if any quality."
        },
        "max_count": {
          "type": "integer",
          "description": "Max count of items."
        },
        "minimum_delivery_count": {
          "type": "integer",
          "description": "Minimum number of items to deliver. Defaults to 0."
        },
        "import_from": {
          "type": "string",
          "description": "Planet to import from."
        }
      }
    },
    "condition": {
      "type": "object",
      "description": "A circuit or logistic condition.",
      "properties": {
        "first_signal": {
          "$ref": "#/definitions/signalID",
          "description": "The first signal in the condition."
        },
        "second_signal": {
          "$ref": "#/definitions/signalID",
          "description": "The second signal in the condition."
        },
        "comparator": {
          "type": "string",
          "description": "Comparator operator (e.g., '>', '=', '<')."
        },
        "constant": {
          "type": "integer",
          "description": "A constant value used in the condition."
        }
      }
    },
    "arithmeticConditions": {
      "type": "object",
      "description": "Parameters for arithmetic combinators.",
      "properties": {
        "first_signal": {
          "$ref": "#/definitions/signalID",
          "description": "First input signal."
        },
        "second_signal": {
          "$ref": "#/definitions/signalID",
          "description": "Second input signal."
        },
        "operation": {
          "type": "string",
          "description": "Arithmetic operation (e.g., '+', '-', '*', '/')."
        },
        "output_signal": {
          "$ref": "#/definitions/signalID",
          "description": "Signal where the result is stored."
        }
      }
    },
    "deciderConditions": {
      "type": "object",
      "description": "Parameters for decider combinators.",
      "properties": {
        "first_signal": {
          "$ref": "#/definitions/signalID",
          "description": "First input signal."
        },
        "second_signal": {
          "$ref": "#/definitions/signalID",
          "description": "Second input signal."
        },
        "comparator": {
          "type": "string",
          "description": "Comparator operator."
        },
        "constant": {
          "type": "integer",
          "description": "Constant value for comparison."
        },
        "output_signal": {
          "$ref": "#/definitions/signalID",
          "description": "Signal to output when condition is true."
        },
        "copy_count_from_input": {
          "type": "boolean",
          "description": "Whether to copy the input count to the output."
        }
      }
    },
    "speakerParameters": {
      "type": "object",
      "description": "Playback settings for a programmable speaker.",
      "properties": {
        "playback_volume": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Volume of the speaker."
        },
        "playback_globally": {
          "type": "boolean",
          "description": "Whether the sound plays globally."
        },
        "allow_polyphony": {
          "type": "boolean",
          "description": "Whether multiple sounds can play simultaneously."
        }
      }
    },
    "speakerAlertParameters": {
      "type": "object",
      "description": "Alert settings for a programmable speaker.",
      "properties": {
        "show_alert": {
          "type": "boolean",
          "description": "Whether to show an alert."
        },
        "show_on_map": {
          "type": "boolean",
          "description": "Whether to show the alert on the map."
        },
        "icon_signal_id": {
          "$ref": "#/definitions/signalID",
          "description": "Icon displayed with the alert."
        },
        "alert_message": {
          "type": "string",
          "description": "Custom message for the alert."
        }
      }
    },
    "section": {
      "type": "object",
      "description": "A section within the control behavior.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "Index of the section.",
          "minimum": 1
        },
        "filters": {
          "type": "array",
          "items": { "$ref": "#/definitions/filter" },
          "description": "Filters within the section."
        }
      },
      "required": ["index", "filters"]
    },
    "filter": {
      "type": "object",
      "description": "A filter within a section.",
      "properties": {
        "index": {
          "type": "integer",
          "description": "Index of the filter.",
          "minimum": 1
        },
        "name": {
          "type": "string",
          "description": "Name of the filtered item."
        },
        "quality": {
          "type": "string",
          "description": "Quality level of the item."
        },
        "comparator": {
          "type": "string",
          "description": "Comparator used for filtering."
        },
        "count": {
          "type": "integer",
          "description": "Count threshold for the filter."
        }
      },
      "required": ["index", "name", "comparator", "count"]
    }
  }
}
